---
title: Modelo de Regressão Logística

format: 
  html: 
    toc: true
    toc-depth: 2
    theme: style.scss
    message: false
    warning: false
        
title-block-banner: true
---

## Importação

```{r}
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(onsvplot)
library(here)
library(knitr)
load(here("data","sim.rda"))
options(scipen = 999)
```

## Preparando dados

```{r}
sim_ajustado <- sim |> 
  mutate(
    IDADE = if_else(
      grepl("anos", IDADE),
      str_sub(IDADE,1,3),
      "0"
    ),
    IDADE = as.numeric(IDADE),
    ESC_DECOD = factor(
      ESC_DECOD,
      levels = c("nenhuma","1 a 3 anos","4 a 7 anos","8 a 11 anos","12 a mais")
    )
  ) |> 
  drop_na() |> 
  select(IDADE, RACACOR, SEXO, ESTCIV, LOCOCOR, ESC_DECOD, MOTOCICLISTA) |> 
  rename(idade = IDADE,
         cor = RACACOR,
         sexo = SEXO,
         estado_civil = ESTCIV,
         local_obito = LOCOCOR,
         escolaridade = ESC_DECOD,
         motociclista = MOTOCICLISTA) |> 
  mutate(across(c(cor, sexo, estado_civil, local_obito, motociclista), 
                as_factor))

sim_ajustado |> head() |> kable()
```

## Separando dados de treino e teste

```{r}
set.seed(123)

data_split <- initial_split(sim_ajustado, prop = 0.8)

train_split <- training(data_split)
test_split <- testing(data_split)

nrow(train_split)
nrow(test_split)
```

## Pré-processamento

```{r}
metrix <- metric_set(accuracy, precision, sens, roc_auc)

log_model <- 
  logistic_reg(mixture = 1) |> 
  set_engine("glm")

prep_steps <- 
  recipe(motociclista ~ ., train_split) |>
  step_dummy(all_nominal_predictors()) 

prep_steps |> summary() |> kable()

prep_steps |> prep() |> juice() |> head() |> kable()
```

## Separando dados para Cross validation

```{r}
data_folds <- vfold_cv(data = train_split)
```

## Criando workflow

```{r}
log_wflow <- 
  workflow() |> 
  add_recipe(prep_steps) |> 
  add_model(log_model)

log_wflow
```

## Cross Validation

```{r}
log_cvfit <- fit_resamples(object = log_wflow, resamples = data_folds, metrics = metrix)
```

```{r}
log_cvfit |> 
  collect_metrics(summarize = FALSE) |> 
  pivot_wider(names_from = .metric, values_from = .estimate) |> 
  select(-.estimator, -.config) |> 
  mutate(mean = (accuracy + precision + sens + roc_auc)/4) |> 
  filter(mean == max(mean)) |> 
  kable()
```

```{r}
best_fold <- analysis(log_cvfit$splits[[7]])

best_fold |> head() |> kable()
```

## Treino e teste do modelo

```{r}
log_fit <-
  log_wflow |> 
  fit(best_fold)

log_fit
```

```{r}
log_preds <- log_fit |> 
  predict(test_split) |> 
  bind_cols(test_split)

log_preds
```

```{r}
metricas <- metric_set(accuracy, precision, sens)

metricas(log_preds, truth = motociclista, estimate = .pred_class)
```

```{r}
conf_mat(data = log_preds, estimate = .pred_class, truth = motociclista)
```


---
title: Teste de modelos para classificação

format: 
  html: 
    toc: true
    toc-depth: 2
    theme: style.scss  
        
title-block-banner: true
---

```{r}
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(onsvplot)
library(here)
library(knitr)
load(here("data","sim.rda"))
options(scipen = 999)
```

## Tratando os dados para melhor pré-processamento

```{r}
sim_ajustado <- sim |> 
  mutate(
    IDADE = if_else(
      grepl("anos", IDADE),
      str_sub(IDADE,1,3),
      "0"
    ),
    IDADE = as.numeric(IDADE),
    ESC_DECOD = factor(
      ESC_DECOD,
      levels = c("nenhuma","1 a 3 anos","4 a 7 anos","8 a 11 anos","12 a mais")
    )
  ) |> 
  drop_na() |> 
  select(IDADE, RACACOR, SEXO, ESTCIV, LOCOCOR, ESC_DECOD, MOTOCICLISTA) |> 
  rename(idade = IDADE,
         cor = RACACOR,
         sexo = SEXO,
         estado_civil = ESTCIV,
         local_obito = LOCOCOR,
         escolaridade = ESC_DECOD,
         motociclista = MOTOCICLISTA)

sim_ajustado
```

## Separando treino e teste

```{r}
set.seed(123)

data_split <- initial_split(sim_ajustado, prop = 0.7)

train_split <- training(data_split)
test_split <- testing(data_split)

nrow(train_split)
nrow(test_split)
```

```{r}
train_split |> 
  filter(motociclista == "nao")

train_split |> 
  filter(motociclista == "sim")
```

## Pré-processamento

```{r}
metrix <- metric_set(accuracy, kap)

log_model <- 
  logistic_reg(mixture = 1) |> 
  set_engine("glm")

prep_steps <- 
  recipe(motociclista ~ ., train_split) |>
  step_dummy(all_nominal_predictors()) |> 
  step_normalize(all_numeric_predictors())

prep_steps |> summary()
```

```{r}
log_wflow <- 
  workflow() |> 
  add_recipe(prep_steps) |> 
  add_model(log_model)

log_fit <-
  log_wflow |> 
  fit(train_split)

sim_pred <- 
  log_fit |> 
  predict(test_split) |> 
  bind_cols(test_split) |> 
  mutate(motociclista = as.factor(motociclista))

sim_pred
```

```{r}
metrix(data = sim_pred, estimate = .pred_class, truth = motociclista)
```